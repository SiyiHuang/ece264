// Adapted from an assignment used Fall 2014 in EE 264 under Prof. Lu 

// READING ASSIGNMENT:  Read Chapter 3 in the Online Draft PDF Text

// ~ Overview ~ //

This assignment uses some more advanced string processing functions to
introduce arrays of pointers. Make sure you read at least up to the
FAQ just below the ======= line below before starting your
assignment. If you have trouble, please read the FAQ section before
you ask for help.  We recommend reading the FAQ first anyways.

// ~ Learning Goals ~ //

(1) Continue learning tools, please focus on this rather than coding speed.
    Important tools include:
        Emacs or Vim
	Touch typing
	Writing testing code for each function as you go
	Gdb debugging
	Valgrind for error detection
    You should use all these tools in this assignment.	

(2) Understand how to edit values outside of a function by passing
pointers to those values.

(3) Be confident with using malloc and free to manage memory.

(4) Understand how to work with arrays of pointers.

(5) Understand the C library function "qsort" and its pointer to a
    function, complete with complex casts.
 

Assignment Part 1.

Fix main.c.  The function swapString() is broken.  Once fixed, main.c
will compile and print a reasonable output.  This standalone task is
easy but designed to get important concepts started.  The rest of the
assignment does not depend on this part.


Assignment Part 2.

Write a file answer03.c with the functions described in answer03.h.
This file should not have a main() function.  WRITE a separate testing
file with a main() function for testing.  Write and use a Makefile for
compiling your testing code AS YOU GO.


The following is Prof. Lu's FAQ to help with writing the functions in answer03.c.
Reading it is recommended.
//======================================================================
// ~ FAQ ~ //

(*) Why pass char * * in strcat_ex?

Pay close attention to the section in the course notes on the swap
function.  It is important to appreciate that a function can never
edit a value outside of itself unless you pass a pointer. So swap(int,
int) can never work. You must write swap(int *, int *).

The same thinking goes for strcat_ex(char * * dest, int * n, const
char * src).

The amount of bytes available at dest (stored at address n) may not be
enough to store the final concatenated string. So you need to do a new
malloc, and then update the value of *dest, and also *n. That means
that strcat_ex(...) must be able to edit these values from inside its
function body. There is no way to do this without passing a pointer to
these values.

If you want to edit an int value, then you must pass an int *.

If you want to edit a char * value, then you must pass a char * *.

Simple.

(*) I get a memory error when I run the tester on strcat_ex...

Some students wonder why they cannot use code like this:

  int src_len = strlen(src); 
  int dst_len = strlen(*dest); 
  if( (src_len + dst_len + 1 > *n) || (*dest == NULL)) { 
     // etc..  
  }

Carefully read the instructions for strcat_ex, and note the *dest
could be NULL. If it is NULL then we always allocate a new buffer. But
there are two problems with the above code.

Firstly, calling strlen(*dest) is an error if *dest is NULL. That is
because the NULL pointer is not a string! Remember, a string is a
pointer to valid memory, and if you go to that memory, you will find a
sequence of characters that ends in a null terminator, '\0'. The NULL
pointer is *not* a string. So calling strlen(*dest) will cause a
segfault on most implementations.

Secondly, if *dest is NULL, then there is no guarantee that *n has
been initialized -- and why should there! *dest is not even a valid
memory location, so why should it have a length! Okay, if *n has not
been initialized, then calling:

   (src_len + dst_len + 1 > *n)

has an unpredictable result. It is a memory error.

Remember short-circuit evaluation from CS159? It is perfectly okay to
write this:

  if( (*dest == NULL) || (src_len + dst_len + 1 > *n) ) { 
     // etc..  
  }

Because *n is not evaluated if *dest is NULL.

(*) Help, explode(...) is killing me, what do I do?

First you need to figure out how many delimiter characters appear in
the string. You do this by calling strchr(delims, str[ind]) on each
character in 'str'.  If you get NULL, then str[ind] is not a
delimiter. If you get non-NULL, then that character is a delimiter.

The return result of explode(...) is an array of strings. A string is
char *, so an array of strings is char * *. If there are N delimiters
in 'str', then the returned array must have space for (N+1) strings.

So why is it (N+1)? If the string has no delimiters, then you just
return the string. If it has 1 delimiter, then you split it in one
place, and get two strings. If there are two delimiters, split it in
two places to get three strings. In general, the presence of N
delimiters means you split the string in N places to (N+1) strings.

The pseudo-code so far looks like this:

// Count how many delimiters are in 'str'
int N = 0;
for each character in 'str' {
   if strchr(delims, str[ind]) != NULL then increment N
}

// Create the return array
char * * strArr = malloc((N+1) * sizeof(char *));

Before proceeding, TEST YOUR CODE, to make sure it works perfectly so
far.

Okay, now we have allocated some memory for the return result, we must
fill it in.  To do this, we need to keep track of _two_ indices, call
them "last" and "ind".  You want "last" to point to 1 past the last
observed delimiter, and "ind" to point to the current character we are
looking at. 

The following pseudo-code explains how to use these two indices to
initialize the first N strings in strArr:

// 
arrInd = 0; // this is the next position where we'll create a string
last = 0; // 1 + the last index we saw a delimiter. Init to 0.
for each ind from [0..strlen(str)), do {
    if str[ind] is a delimiter, then... {
        create a new string that spans the characters [last..ind)
	set strArr[arrInd] to that new string.
        set last to ind + 1.
	increment arrInd
    }
}

Before proceeding, TEST YOUR CODE, to make sure it works perfectly so
far.

Okay we've initialized the first N string, but we still have to do the
(N+1)th string. This is done in the same way as above:

// just take the remaining characters of the string
create a new string that spans the characters [last..strlen(str))
set strArr[N] to the new string.

Do not forget that you must store the length of strArr at the memory
location *arrLen. You need to do this so that when someone calls
explode(...), they will be able to know how long the returned string
array is.

You will save yourself a lot of time if you write and test this code
incrementally.

----------------------------------------------------------------------
